
//! Autogenerated weights for `rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/sybil
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// rewards
// --extrinsic=*
// --steps
// 50
// --repeat
// 20
// --output
// .

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn set_reward() -> Weight;
}

/// Weight functions for `rewards`.
pub struct SybilWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SybilWeight<T> {
	// Storage: Rewards Reward (r:0 w:1)
	fn set_reward() -> Weight {
		(18_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

impl WeightInfo for () {
	fn set_reward() -> Weight {
		0
	}
}
